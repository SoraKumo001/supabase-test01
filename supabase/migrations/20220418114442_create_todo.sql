CREATE TABLE IF NOT EXISTS public."Todo"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL DEFAULT auth.uid(),
    title text COLLATE pg_catalog."default",
    published boolean NOT NULL DEFAULT false,
    description text COLLATE pg_catalog."default",
    CONSTRAINT "Todo_pkey" PRIMARY KEY (id),
    CONSTRAINT "Todo_user_id_fkey" FOREIGN KEY (user_id)
        REFERENCES public."User" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Todo"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."Todo"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Todo" TO anon;

GRANT ALL ON TABLE public."Todo" TO authenticated;

GRANT ALL ON TABLE public."Todo" TO postgres;

GRANT ALL ON TABLE public."Todo" TO service_role;
CREATE POLICY "Enable INSERT for authenticated users only"
    ON public."Todo"
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text) and auth.uid() = user_id);
CREATE POLICY "Enable access to all users"
    ON public."Todo"
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (published or auth.uid() = user_id);
CREATE POLICY "Enable DELETE for users based on user_id"
    ON public."Todo"
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = user_id));
CREATE POLICY "Enable UPDATE for users based on user_id"
    ON public."Todo"
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = user_id));    


alter publication supabase_realtime add table "Todo";


CREATE OR REPLACE FUNCTION public.handle_update()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
AS $BODY$
  begin
    NEW.updated_at := CURRENT_TIMESTAMP;
    return NEW;
  end;
  
$BODY$;

CREATE trigger on_todo_update
  BEFORE UPDATE ON public."Todo"
  for each row execute procedure public.handle_update();