-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.handle_users_update()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF SECURITY DEFINER
AS $BODY$
  begin
    IF (TG_OP = 'DELETE') THEN
      delete from public."User" where id=old.id;
      return old;
    ELSIF (TG_OP = 'UPDATE') THEN
      update public."User" set email=NEW.email;
    ELSIF (TG_OP = 'INSERT') THEN
      insert into public."User"(id, email) values(NEW.id,NEW.email);
    END IF;
    return new;
  end;
  
$BODY$;

ALTER FUNCTION public.handle_users_update()
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.handle_users_update() TO authenticated;

GRANT EXECUTE ON FUNCTION public.handle_users_update() TO postgres;

GRANT EXECUTE ON FUNCTION public.handle_users_update() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.handle_users_update() TO anon;

GRANT EXECUTE ON FUNCTION public.handle_users_update() TO service_role;

CREATE TABLE IF NOT EXISTS public."User"
(
    id uuid NOT NULL,
    email character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT "User_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."User"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."User"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."User" TO anon;

GRANT ALL ON TABLE public."User" TO authenticated;

GRANT ALL ON TABLE public."User" TO postgres;

GRANT ALL ON TABLE public."User" TO service_role;
CREATE POLICY "Enable access to all users"
    ON public."User"
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE FUNCTION public.handle_users_update()
  returns trigger as $$
  begin
    IF (TG_OP = 'DELETE') THEN
      delete from public."User" where id=old.id;
      return old;
    ELSIF (TG_OP = 'UPDATE') THEN
      update public."User" set email=NEW.email;
    ELSIF (TG_OP = 'INSERT') THEN
      insert into public."User"(id, email) values(NEW.id,NEW.email);
    END IF;
    return new;
  end;
  $$ language plpgsql security definer;

CREATE trigger on_auth_user_update
  AFTER INSERT OR UPDATE OR DELETE ON auth.users
  for each row execute procedure public.handle_users_update();


CREATE TABLE IF NOT EXISTS public."Todo"
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL DEFAULT auth.uid(),
    title text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    CONSTRAINT "Todo_pkey" PRIMARY KEY (id),
    CONSTRAINT "Todo_user_id_fkey" FOREIGN KEY (user_id)
        REFERENCES public."User" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Todo"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."Todo"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."Todo" TO anon;

GRANT ALL ON TABLE public."Todo" TO authenticated;

GRANT ALL ON TABLE public."Todo" TO postgres;

GRANT ALL ON TABLE public."Todo" TO service_role;
CREATE POLICY "Enable DELETE/UPDATE for authenticated users only"
    ON public."Todo"
    AS PERMISSIVE
    FOR ALL
    TO public
    USING ((auth.role() = 'authenticated'::text));
CREATE POLICY "Enable INSERT for authenticated users only"
    ON public."Todo"
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Enable access to all users"
    ON public."Todo"
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
